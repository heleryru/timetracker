openapi: 3.0.2
info:
  title: timetrack
  version: 1.0.0
paths:
  /users:
    summary: Path used to manage the list of users.
    description: >-
      The REST endpoint/path used to list and create zero or more `User` entities.  This path contains a
      `GET` and `POST` operation to perform the list and create tasks, respectively.
    post:
      requestBody:
        description: A new `User` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      tags:
        - /users
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                'Invalid email: {reason}':
                  value: 'Invalid email: {reason}'
                Email and password are required:
                  value: Email and password are required
                Password must be at least 8 characters long:
                  value: Password must be at least 8 characters long
                Email must be in a valid format:
                  value: Email must be in a valid format
          description: Client side error
        '409':
          content:
            text/html:
              examples:
                Email already exists:
                  value: Email already exists
          description: The email address provided already exists in the system.
      operationId: createUser
      summary: Create a User
      description: Creates a new instance of a `User`.
  /times:
    summary: Path used to manage the list of times.
    description: " The REST endpoint/path used to list and create zero or more `Time` entities.  This path contains\r\n      a `GET` and `POST` operation to perform the list and create tasks, respectively."
    get:
      tags:
        - Times
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Time'
          description: Successful response - returns an array of `Time` entities.
        '400':
          content:
            text/html: { }
          description: Bad Request
        '401':
          content:
            text/html: { }
          description: Unauthorized
      security:
        - Bearer: [ ]
      operationId: getTimes
      summary: List All Times
      description: Gets a list of all `Time` entities.
    post:
      requestBody:
        description: A new `Time` to be created.
        required: true
      responses:
        '201':
          description: Successful response.
        '400':
          content:
            text/html: { }
          description: Bad Request
        '401':
          content:
            text/html: { }
          description: Unauthorized
      security:
        - Bearer: [ ]
      operationId: createTime
      summary: Create a Time
      description: Creates a new instance of a `Time`.
  /: { }
  /sessions:
    summary: Path used to manage the list of sessions.
    description: "The REST endpoint/path used to list and create zero or more `Session` entities.  This path\r\n      contains a `GET` and `POST` operation to perform the list and create tasks, respectively."
    post:
      requestBody:
        description: A new `Session` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      tags:
        - /sessions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
          description: Successful response.
        '400':
          content:
            text/html:
              examples:
                'Email and password are required:':
                  value: Email and password are required
          description: ' Bad Request'
        '401':
          content:
            text/html:
              examples:
                'Invalid password:':
                  value: Invalid password
          description: Unauthorized
        '404':
          content:
            text/html:
              examples:
                'User not found:':
                  value: User not found
          description: Not Found
      operationId: createSession
      summary: Create a Session
      description: '"Creates a new instance of a `Session`, signing the user in. Returns session ID."'
    delete:
      tags:
        - /sessions
      responses:
        '204':
          description: ' Successful response.'
        '400':
          content:
            text/html:
              examples:
                'Invalid authorization header:':
                  value: Invalid authorization header
          description: Bad Request
        '401':
          content:
            text/html:
              examples:
                'Missing authorization header:':
                  value: Missing authorization header
                'Invalid session:':
                  value: Invalid session
          description: Unauthorized
      security:
        - Bearer: [ ]
      summary: Destroy a Session
      description: '"Destroys a `Session`, signing the user out. Reads the session ID from Authorization header."'
components:
  schemas:
    Time:
      description: ''
      type: object
      example: "id: 1\r\n        name: trenn\r\n        description: 1 tund j√µusaal\r\n        userId: 1"
    Schema:
      type: string
    User:
      title: Root Type for User
      description: ''
      type: object
      properties:
        id:
          format: int32
          description: A field that represents the unique identifier of the user.
          type: integer
          example: '12345'
        email:
          description: A field that represents the email address of the user.
          type: string
          example: john.doe@example.com
        password:
          description: A field that represents the password of the user.
          type: string
          example: MySecurePassword123
      example:
        id: 3
        email: email@example.com
        password: pass123
    Session:
      description: Path used to manage the list of sessions.
      type: string
    Credentials:
      description: ''
      type: object
  securitySchemes:
    Bearer:
      scheme: bearer
      type: http
tags:
  - name: Users
    description: ''
  - name: Sessions
    description: ''
  - name: Times
    description: ''
  - name: Credentials
    description: ''
